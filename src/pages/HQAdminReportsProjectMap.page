<apex:page controller="HQAdminReportsProjectMapController" sidebar="false" docType="html-5.0">

    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"/>
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.4.0/dist/leaflet.css"
          integrity="sha512-puBpdR0798OZvTTbP4A8Ix/l+A4dHDD0DGqYW6RQ+9jxkRFclaxxQb/SJAWZfWAkuyeQUytO7+7N4QKrDh+drA=="
          crossorigin="anonymous"/>
    <script src="https://unpkg.com/leaflet@1.4.0/dist/leaflet.js"
            integrity="sha512-QVftwZFqvtRNi0ZyCtsznlKSWOStnDORoefr1enyq5mVL4tmKB3S/EnC3rRJcxCPavG10IcrVGSmPh6Qw5lwrg=="
            crossorigin="anonymous"></script>

    <apex:stylesheet value="{!URLFOR($Resource.hqAdminReports, 'hqAdminReports.css')}"/>
    <apex:includeScript value="{!URLFOR($Resource.hqAdminReports, 'hqAdminReports.js')}"/>

    <style type="text/css">
        .ui-dialog {
            z-index: 1001 !important;
            max-width: 60% !important;
        }
        .ui-dialog-titlebar {
            background-color: #1797c0;
            color: #fff;
        }
        #dataModal {
            min-height: 150px !important;
            max-height: 800px !important;
            font-size: 1.2em;
        }
        #dataModal a {
            color: #015ba7;
        }
        #dataModal tr {
            border-bottom: 1px solid #e3deb8;
        }
        #dataModal table {

            border-collapse: collapse;
        }
        #dataModal table th {

            background-color: #cfeef8;
            padding: 5px 10px 5px 10px;
        }
        #dataModal table td {

            background-color:  #e3f3ff;
            padding: 5px 10px 5px 10px;
        }
    </style>

    <script type="text/javascript">
        $j = jQuery.noConflict();

        var dataController, mapController, addStats;

        function openCountryModal(result, country) {
            var table, modalElement = $j('#dataModal');
            modalElement.empty();
            modalElement.append($j("<h4><span>Projects in " + country + " with the Most Users</span></h4><hr />"));

            table = $j("<table></table>");
            table.append($j("<tr><th>Project</th><th>Organization</th><th>Description</th><th>Sector</th><th>Sub Sector</th><th>Active Users</th><th>Countries</th><th>Server Name</th></tr>"))
            Object.keys(result).map(function (index) {
                table.append($j('<tr><td><a target="_blank" href="../' + result[index].sfId + '">' + result[index].projectName + '</td><td>' + result[index].organization + '</td>'
                                  + '<td>' + result[index].description + '</td><td>' + result[index].sector + '</td>'
                                  + '<td>' + result[index].subSector + '</td><td>' + result[index].users + '</td>'
                                  + '<td>' + result[index].countries + '</td><td>' + result[index].serverName + '</td></tr>'));
            });
            modalElement.append(table);

            modalElement.dialog('open');
            modalElement.dialog('option' , 'title' , 'Country top 5 project');
        }

        $j(document).ready(function() {
            $j('#dataModal').dialog({ autoOpen: false, modal: true, closeOnEscape: true, dialogClass: 'modalBase', width: 'auto', height: 'auto' });
            choosenFilters = {};
            lastChoosenFilters = choosenFilters;
            showLoader('#facets-loader');
            HQAdminReportsProjectMapController.loadReportMapFacets(JSON.stringify(lastChoosenFilters), function(result, event){
                if(event.status) {
                    filters = result;
                    generateFilters();
                    hideLoader('#facets-loader');
                }
            });

            loadMap();
        });

        function loadMap() {
            // set calculated height for map :
            $j("#map").height($j("#map").width() * 0.45);
            $j( "#map-type" ).selectmenu({
                width: false,
                change: function( event, ui ) {
                    dataController.toggleMap();
                    mapController.colorAll();
                }
            });

            dataController = function() {
                var that = {};
                var maxNumProjects = 0;
                var maxNumUsers = 0;
                var totalNumUsers = 0;
                var totalNumProjects = 0;
                var projects_per_country = {};
                var users_per_country = {};
                var is_project_count_map = true;

                that.refreshProjectData = function (callback) {
                    showLoader('#map-loader');
                    HQAdminReportsProjectMapController.loadMapData(JSON.stringify(lastChoosenFilters), function(result, event){
                        if(event.status) {
                            totalNumProjects = result.totalActiveProjects;
                            projects_per_country = result.countryMap;
                            users_per_country = result.userMap;

                            maxNumProjects = 0;
                            Object.keys(projects_per_country).map(function (country) {
                                if (projects_per_country[country] > maxNumProjects) {
                                    maxNumProjects = projects_per_country[country];
                                }
                            });

                            maxNumUsers = 0;
                            totalNumUsers = 0;
                            Object.keys(users_per_country).map(function (country) {
                                if (users_per_country[country] > maxNumUsers) {
                                    maxNumUsers = users_per_country[country];
                                }
                                totalNumUsers += users_per_country[country];
                            });

                            mapController.colorAll();
                            if (callback) {
                                callback();
                            }
                            hideLoader('#map-loader');
                        }
                    });
                };

                that.getCount = function (countryName) {
                    countryName = countryName.toUpperCase();
                    if (is_project_count_map) {
                        return projects_per_country[countryName] || 0;
                    } else {
                        return users_per_country[countryName] || 0;
                    }
                };

                that.toggleMap = function () {
                    is_project_count_map = !is_project_count_map;
                };

                that.getUnit = function (count) {
                    if (is_project_count_map) {
                        return count > 1 ? 'active projects' : 'active project';
                    } else {
                        return count > 1 ? 'active users' : 'active user';
                    }
                };

                that.getNumActiveCountries = function () {
                    return Object.keys(projects_per_country).length;
                };

                that.getMax = function () {
                    if (is_project_count_map) {
                        return maxNumProjects;
                    } else {
                        return maxNumUsers;
                    }
                };

                that.getNumProjects = function () {
                    return totalNumProjects;
                };

                that.getNumUsers = function () {
                    return totalNumUsers;
                };

                that.isProjectCountMap = function () {
                    return is_project_count_map;
                };

                that.isProjectCountMap = function () {
                    return is_project_count_map;
                };

               return that;
           }();

            mapController = function() {
                // courtesy of http://colorbrewer2.org/
                var COUNTRY_COLORS = ['#fef0d9','#fdd49e','#fdbb84','#fc8d59','#e34a33','#b30000'];
                var PROJECT_COUNTS_THRESHOLD = [10, 20, 30, 40, 50];
                var USER_COUNTS_THRESHOLD = [10, 100, 500, 1000, 4000];
                var mapboxAccessToken = "{!mapAccessToken}";

                var that = {}, countriesGeo;
                // A lot of the styling work here is modeled after http://leafletjs.com/examples/choropleth.html
                var map = L.map('map').setView([0, 0], 3), mapId = "{!mapId}";
                var southWest = L.latLng(-80.0, -180.0),
                    northEast = L.latLng(85.0, 180.0),
                    bounds = L.latLngBounds(southWest, northEast);

                map.setMaxBounds(bounds);
                map.on('drag', function () {
                    map.panInsideBounds(bounds, {animate: false});
                });
                map.createPane('labels');
                // This pane is above markers but below popups
                map.getPane('labels').style.zIndex = -1;
                // copied from dimagisphere
                L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/256/{z}/{x}/{y}?access_token={accessToken}', {
                    maxZoom: 6,
                    minZoom: 2,
                    id: mapId,
                    accessToken: mapboxAccessToken,
                    bounds: bounds,
                    noWrap: true,
                }).addTo(map);

                that.colorAll = function() {
                    if (countriesGeo !== undefined) {
                        countriesGeo.setStyle(style);
                        map.removeControl(legend);
                        legend.addTo(map);
                    }
                }

                function getColor(featureId) {
                    var thresholdScales;
                    var count = dataController.getCount(featureId);
                    var isProjectCountMap = dataController.isProjectCountMap();
                    if (isProjectCountMap) {
                        thresholdScales = PROJECT_COUNTS_THRESHOLD;
                    } else {
                        thresholdScales = USER_COUNTS_THRESHOLD;
                    }
                    var index = getColorScaleIndex(count, thresholdScales);
                    return COUNTRY_COLORS[index];
                }

                function getColorScaleIndex(count, scales) {
                    for (var i = 0; i < scales.length; i++) {
                        if (count < scales[i]) {
                            return i;
                        }
                    }
                    return scales.length;
                }

                function getOpacity(featureId) {
                    if (dataController.getCount(featureId)) {
                        return 0.7;
                    } else {
                        return 0;
                    }
                }

                function style(feature) {
                    return {
                        fillColor: getColor(feature.properties.name),
                        weight: 2,
                        opacity: 1,
                        color: 'white',
                        dashArray: '3',
                        fillOpacity: getOpacity(feature.properties.name),
                    };
                }

                // highlights
                function highlightFeature(e) {
                    var layer = e.target;
                    layer.setStyle({
                        weight: 4,
                        color: '#002c5f',
                        dashArray: '',
                    });
                    if (!L.Browser.ie && !L.Browser.opera) {
                        layer.bringToFront();
                    }
                    info.update(layer.feature.properties);
                }

                function resetHighlight(e) {
                    countriesGeo.resetStyle(e.target);
                    info.update();
                }

                function formatCountryNames(countries) {
                    return countries.map(function (country) {
                        var formattedCountryName = country.charAt(0).toUpperCase();
                        if (country.indexOf(",") > -1) {
                            formattedCountryName += country.substring(1, country.indexOf(",")).toLowerCase();
                        } else {
                            formattedCountryName += country.substring(1).toLowerCase();
                        }
                        return formattedCountryName;
                    });
                }

                function onEachFeature(feature, layer) {
                    layer.on({
                        mouseover: highlightFeature,
                        mouseout: resetHighlight,
                        click: function() {
                            if (dataController.getCount(feature.properties.name)) {
                                showLoader('#map-loader');
                                HQAdminReportsProjectMapController.loadTopFiveProjects(feature.properties.name, function(result, event) {
                                    if(event.status) {
                                        openCountryModal(result, feature.properties.name);
                                        hideLoader('#map-loader');
                                    }
                                });
                            }
                        }
                    });
                }

                // info control
                var info = L.control();
                info.onAdd = function () {
                    this._div = L.DomUtil.create('div', 'map-info');
                    this.update();
                    return this._div;
                };

                // method that we will use to update the control based on feature properties passed in
                info.update = function (props) {
                    function _getInfoContent(countryName) {
                        var count = dataController.getCount(countryName);
                        var unit = dataController.getUnit(count);
                        var message = count ? count + ' ' + unit : 'no ' + unit + 's';
                        return '<b>' + countryName + '</b>: ' + message;
                    }
                    this._div.innerHTML = (props ? _getInfoContent(props.name) : 'Hover over a country');
                };
                info.addTo(map);

                // add a legend
                var legend = L.control({position: 'bottomleft'});
                legend.onAdd = function () {
                    var div = L.DomUtil.create('div', 'info legend');
                    var thresholds;
                    div.innerHTML += '<i style="background:' + 'black' + '"></i> ' + '0' + '<br>';
                    var is_project_count_map = dataController.isProjectCountMap();
                    if (is_project_count_map) {
                        thresholds = PROJECT_COUNTS_THRESHOLD;
                    } else {
                        thresholds = USER_COUNTS_THRESHOLD;
                    }
                    for (var i = 0; i < thresholds.length; i++) {
                        div.innerHTML += '<i style="background:' + COUNTRY_COLORS[i] + '"></i> ';
                        if (thresholds[i - 1] !==  undefined) {
                            if (thresholds[i - 1] + 1 < thresholds[i]) {
                                div.innerHTML += (thresholds[i - 1] + 1) + '&ndash;';
                            }
                        } else if (thresholds[i] > 1) {
                            div.innerHTML += '1&ndash;';
                        }
                        div.innerHTML += thresholds[i] + '<br>';
                    }
                    div.innerHTML += '<i style="background:' + COUNTRY_COLORS[thresholds.length] + '"></i> '
                                     + (thresholds[thresholds.length - 1] + 1) + '+';
                    return div;
                };
                legend.addTo(map);

                var stats = L.control({position: 'bottomright'});
                stats.onAdd = function () {
                    this._div = L.DomUtil.create('div', 'info legend');
                    this.update();
                    return this._div;
                };
                stats.update = function(props) {
                    var textBody = "";
                    textBody += '<p><b>Statistics</b></p>';
                    textBody += '<p>Number of Active Countries: ' + dataController.getNumActiveCountries() +  '</p>';
                    textBody += '<p>Number of Active Mobile Users: ' + dataController.getNumUsers() +  '</p>';
                    textBody += '<p>Number of Active Projects: ' + dataController.getNumProjects() +  '</p>';
                    textBody += '<br><p><em> Active: A project or user submitted a form in past 30 days.</em></p>';
                    this._div.innerHTML = textBody;
                };
                stats.addTo(map);

                that.updateStats = function() {
                    stats.update();
                };

                $j.get("https://raw.githubusercontent.com/dimagi/world.geo.json/master/countries.geo.json", function (data) {
                    countriesGeo = L.geoJson(JSON.parse(data), {style: style, onEachFeature: onEachFeature}).addTo(map);
                    dataController.refreshProjectData(that.updateStats);
                });

                return that;
            }();
        }

        function applyFilters() {
            lastChoosenFilters = choosenFilters;
            showLoader('#facets-loader');
            dataController.refreshProjectData(mapController.updateStats);
            HQAdminReportsProjectMapController.loadReportMapFacets(JSON.stringify(lastChoosenFilters), function(result, event) {
                if(event.status) {
                    filters = result;
                    rebuildFilters();
                    hideLoader('#facets-loader');
                }
            });
        }
    </script>

    <apex:form >
        <apex:outputPanel >
            <div id="menu-container">
                <div class="msidebar">
                    <div class="msidebarHeader">
                        <h2>Reports : </h2>
                    </div>
                    <div class="msidebarContent">
                        <apex:repeat value="{!supportedReportsList}" var="reportKey">
                            <a class="msidebarElement" href="HQAdminReports?report={!reportKey}">
                                {!supportedReports[reportKey]}
                            </a>
                        </apex:repeat>
                        <a class="msidebarElement msidebarElementOpened" href="HQAdminReportsProjectMap">Active Project Map</a>
                    </div>
                </div>
                <div class="msidebar">
                    <div class="dynamic-loader" id="map-loader">
                        <img src="{!$Resource.BrokenCircle}" title="Please Wait..."/>
                    </div>
                    <div class="msidebarHeader">
                        <h2>Map : </h2>
                    </div>
                    <div class="msidebarContent">
                        <div class="msidebarRow">
                            <select name="map-type" id="map-type">
                                <option selected="selected">Projects</option>
                                <option>Users</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="msidebar">
                    <div class="msidebarHeader">
                        <h2>Facets : </h2>
                    </div>
                    <div class="msidebarContent dynamic-wrapper">
                        <div class="dynamic-loader dynamic-loader-small" id="facets-loader">
                            <img src="{!$Resource.BrokenCircle}" title="Please Wait..."/>
                        </div>
                        <input type="button" class="btn msidebarRow" onclick="applyFilters();" value="Apply" /><br/>
                        <div id="facet-container"></div>
                    </div>
                </div>
            </div>
        </apex:outputPanel>
        <apex:outputPanel >
            <div id="data-container">
                <apex:pageBlock title="Active Project Map" id="projectMap" >
                    <div id="map"></div>
                </apex:pageBlock>
            </div>
        </apex:outputPanel>
        <!-- Country top 5 projects modal -->
        <div id="dataModal" class="dataModal">
        </div>
    </apex:form>
</apex:page>