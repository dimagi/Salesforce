<apex:component controller="GlobalMetricsComponentController" allowDML="true">
    <apex:attribute name="employeeEmailComp"
        type="String"
        assignTo="{!employeeEmail}"
        required="true"
        description="This employee email adress, required to fill in RED Form." />
    <apex:attribute name="pageControllerComp"
        type="DimagiToolsController"
        assignTo="{!pageController}"
        required="true"
        description="The controller for the page." />

    <script type="text/javascript">

        var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            arcRadius1 = [{ inner: 0.6, outer: 1 }, { inner: 0.65, outer: 0.95 }];

        function addGraphs() {
            nv.addGraph(function() {
                var chart, activeUsers = $j("[id$=userGraphDataId]").val();
                chart = buildMultiBatChart('Sum of Active Mobile Users (Thousands)', 'Snapshot Date');
                $j("[id$=activeUsers").append("<svg></svg>");
                d3.select('#activeUsers svg').datum(fillGraphData(JSON.parse(activeUsers), false))
                    .transition().duration(500).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });

            nv.addGraph(function() {
                var chart, wams = $j("[id$=wamGraphDataId]").val();
                chart = buildMultiBatChart('Sum of Wam (Thousands)', 'Snapshot Date');
                $j("[id$=wams").append("<svg></svg>");
                d3.select('#wams svg').datum(fillGraphData(JSON.parse(wams), false))
                    .transition().duration(500).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });

            nv.addGraph(function() {
                var chart, forms = $j("[id$=formGraphDataId]").val();
                chart = buildMultiBatChart('Forms for Period (Thousands)', 'Snapshot Date');
                $j("[id$=forms").append("<svg></svg>");
                d3.select('#forms svg').datum(fillGraphData(JSON.parse(forms), false))
                    .transition().duration(500).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });

            nv.addGraph(function() {
                var chart, programs = $j("[id$=programGraphDataId]").val();
                chart = buildMultiBatChart('Sum of Scale of Programs', 'Snapshot Date');
                $j("[id$=programs").append("<svg></svg>");
                d3.select('#programs svg').datum(fillGraphData(JSON.parse(programs), false))
                    .transition().duration(500).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });

            nv.addGraph(function() {
                var chart, mrrRecs = $j("[id$=mrrDataId]").val();
                chart = buildMultiBatChart('Sum of Monthly fee (Thousands)', 'Invoice End Date');
                $j("[id$=mrr").append("<svg></svg>");
                d3.select('#mrr svg').datum(fillGraphData(JSON.parse(mrrRecs), true))
                    .transition().duration(500).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });

            nv.addGraph(function() {
                var chart, range = [], records = fillPerformanceData(true);
                for (var i = 0; i < records.size; i++) {
                    range.push(records.data[0].values[i].x);
                }
                chart = buildMultiChart('Avg Page Load', records.maxY1, records.maxY2, range);
                $j("[id$=performance1").append("<svg></svg>");
                d3.select('#performance1 svg').datum(records.data)
                    .transition().duration(500).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });

            nv.addGraph(function() {
                var chart, range = [], records = fillPerformanceData(false);
                for (var i = 0; i < records.size; i++) {
                    range.push(records.data[0].values[i].x);
                }
                chart = buildMultiChart('Avg Apdex', records.maxY1, records.maxY2, range);
                $j("[id$=performance2").append("<svg></svg>");
                d3.select('#performance2 svg').datum(records.data)
                    .transition().duration(500).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });

            nv.addGraph(function() {
                var graphData = fillGSData(JSON.parse($j("[id$=gsGraphDataId]").val())), range = [], chart = nv.models.lineChart().height(400);
                chart.legend.margin({top: 5});
                for (var i = 0; i < graphData[0].values.length; i++) {
                    range.push(graphData[0].values[i].x);
                }
                chart.xAxis.tickValues(range);
                chart.xAxis.axisLabel('PRO Cycle Date')
                    .rotateLabels(-90).tickFormat(function(d) {
                        var dDate = new Date(d)
                        return (dDate.getDate() + ' ' + monthNames[dDate.getMonth()] + ' ' + dDate.getFullYear());
                    });
                chart.yDomain([0, 1]);
                chart.yAxis.axisLabel('GS Quality Overall Status').tickFormat(d3.format('%'));
                $j("[id$=quality").append("<svg></svg>");
                d3.select('#quality svg').datum(graphData, false)
                    .transition().duration(500).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });

            nv.addGraph(function() {
                var graphData = fillGSData(JSON.parse($j("[id$=gsGraphDataId]").val())), range = [], chart = nv.models.lineChart().height(400);
                chart.legend.margin({top: 5});
                for (var i = 0; i < graphData[0].values.length; i++) {
                    range.push(graphData[0].values[i].x);
                }
                chart.xAxis.tickValues(range);
                chart.xAxis.axisLabel('PRO Cycle Date').rotateLabels(-90)
                    .tickFormat(function(d) {
                        var dDate = new Date(d)
                        return (dDate.getDate() + ' ' + monthNames[dDate.getMonth()] + ' ' + dDate.getFullYear());
                    });
                    chart.yDomain([0, 1]);
                chart.yAxis.axisLabel('GS Quality Customer Satisfaction').tickFormat(d3.format('%'));
                $j("[id$=customers").append("<svg></svg>");
                d3.select('#customers svg').datum(graphData, true)
                    .transition().duration(500).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });

            nv.addGraph(function() {
                var expected, per, gData, chart;
                gData = JSON.parse($j("[id$=oppExpecteId]").val());
                per = (100 * (gData.Graph_Value_1__c / gData.Graph_Value_2__c)).toFixed(2);
                chart = buildPieChart('$' + (gData.Graph_Value_1__c).toFixed(2) + ' : ' + per + '%');
                chart.tooltip.valueFormatter(function (d) { 
                                                var percen = (d == gData.Graph_Value_1__c ? per : (100 - per).toFixed(2));
                                                return '$' + d.toFixed(2) + ' (' + percen + '%)';
                                             });
                $j("[id$=oppWonBottomValue").before("<svg></svg>");
                expected = gData.Graph_Value_2__c - gData.Graph_Value_1__c;
                if (expected < 0) {
                    expected = 0;
                }
                d3.select('#oppWon svg').datum([{key: "Opportunities Won", y: gData.Graph_Value_1__c}, {key: "Target Missing", y: expected}]).transition().duration(1200).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });

            nv.addGraph(function() {
                var expected, per, gData, chart;
                gData = JSON.parse($j("[id$=evExpectedId]").val());
                per = (100 * (gData.Graph_Value_1__c / gData.Graph_Value_2__c)).toFixed(2);
                chart = buildPieChart('$' + (gData.Graph_Value_1__c).toFixed(2) + ' : ' + per + '%');
                chart.tooltip.valueFormatter(function (d) { 
                                                var percen = (d == gData.Graph_Value_1__c ? per : (100 - per).toFixed(2));
                                                return '$' + d.toFixed(2) + ' (' + percen + '%)';
                                             });
                $j("[id$=netEVBottomValue").before("<svg></svg>");
                expected = gData.Graph_Value_2__c - gData.Graph_Value_1__c;
                if (expected < 0) {
                    expected = 0;
                }
                d3.select('#netEV svg').datum([{key: "Changes in Net EV", y: gData.Graph_Value_1__c}, {key: "Target Missing", y: expected}]).transition().duration(1200).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });

            nv.addGraph(function() {
                var expected, per, gData, chart;
                gData = JSON.parse($j("[id$=bufferEvGenId]").val());
                per = (100 * (gData.Graph_Value_1__c / gData.Graph_Value_2__c)).toFixed(2);
                chart = buildPieChart('$' + (gData.Graph_Value_1__c).toFixed(2) + ' : ' + per + '%');
                chart.tooltip.valueFormatter(function (d) { 
                                                var percen = (d == gData.Graph_Value_1__c ? per : (100 - per).toFixed(2));
                                                return '$' + d.toFixed(2) + ' (' + percen + '%)';
                                             });
                $j("[id$=bufferEVBottomValue").before("<svg></svg>");
                expected = gData.Graph_Value_2__c - gData.Graph_Value_1__c;
                if (expected < 0) {
                    expected = 0;
                }
                d3.select('#bufferEV svg').datum([{key: "Buffer EV Generated", y: gData.Graph_Value_1__c}, {key: "Target Missing", y: expected}]).transition().duration(1200).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });

            nv.addGraph(function() {
                var aggData, chart = nv.models.discreteBarChart().height(400);
                chart.xAxis.axisLabel('Efficiency Owner (BU)');
                chart.yAxis.axisLabel('Aggregate Weighted Efficiency');
                chart.yAxis.axisLabelDistance(1);
                chart.yAxis.tickFormat(d3.format('%'));
                chart.yAxis.ticks(6);
                chart.x(function(d) { return d.label }).y(function(d) { return d.value });

                aggData = $j("[id$=aggregateEffId]").val();
                $j("[id$=aggregateExecution").append("<svg></svg>");
                d3.select('#aggregateExecution svg').datum(fillAggregateData(JSON.parse(aggData)))
                    .transition().duration(500).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });

            nv.addGraph(function() {
                var chart = buildDiscBatChart('Sum of Active Mobile Users (Thousands)');
                $j("[id$=activeUsersICDS").append("<svg></svg>");
                d3.select('#activeUsersICDS svg').datum(loadICDSData('users')).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });

            nv.addGraph(function() {
                var chart = buildDiscBatChart('Sum of Wam (Thousands)');
                $j("[id$=wamsICDS").append("<svg></svg>");
                d3.select('#wamsICDS svg').datum(loadICDSData('wams')).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });

            nv.addGraph(function() {
                var chart = buildDiscBatChart('Forms for period (Thousands)');
                $j("[id$=formsICDS").append("<svg></svg>");
                d3.select('#formsICDS svg').datum(loadICDSData('forms')).call(chart)
                    .transition().duration(500);
                nv.utils.windowResize(chart.update);
                return chart;
            });

            nv.addGraph(function() {
                var range = [], serverUpTimeData, chart = nv.models.lineChart().height(400);
                serverUpTimeData = fillServerUpTimeData(JSON.parse($j("[id$=serverUpTimeId]").val()));
                chart.legend.margin({top: 5});
                chart.xAxis.axisLabel('Date');
                chart.xAxis.rotateLabels(-90);
                chart.xAxis.tickFormat(function(d) {
                        var dDate = new Date(d)
                        return (monthNames[dDate.getMonth()] + ' ' + dDate.getFullYear());
                    });
                for (var i = 0; i < serverUpTimeData[0].values.length; i++) {
                    range.push(serverUpTimeData[0].values[i].x);
                }
                chart.xAxis.tickValues(range);
                chart.yAxis.tickFormat(d3.format('%'));
                chart.yAxis.axisLabel('Server Uptime');
                chart.tooltip.valueFormatter(function (d) { 
                                           return (new Number(d) * 100).toFixed(2) + '%';
                                       });

                $j("[id$=serverUpTime").append("<svg></svg>");
                d3.select('#serverUpTime svg').datum(serverUpTimeData)
                    .transition().duration(500).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });

            nv.addGraph(function() {
                var chart, headCount = loadGSData(JSON.parse($j("[id$=headCountDataId]").val()));
                chart = buildMultiBatChart('Record Count', 'Snapshot Date');
                $j("[id$=headcount").append("<svg></svg>");
                d3.select('#headcount svg').datum(headCount)
                    .transition().duration(500).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });

            nv.addGraph(function() {
                var chart, gsRevenuRecords = loadGSData(JSON.parse($j("[id$=gsRevenueDataId]").val()));
                chart = buildMultiBatChart('Sum of GS Revenue (Thousands)', 'Month');
                $j("[id$=gsRevenue").append("<svg></svg>");
                d3.select('#gsRevenue svg').datum(gsRevenuRecords)
                    .transition().duration(500).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });

            nv.addGraph(function() {
                var chart, zendeskRecords = $j("[id$=zendeskTicketsId]").val();
                chart = buildMultiBatChart('# of Tickets Created', 'Date');
                $j("[id$=zendeskTickets").append("<svg></svg>");
                d3.select('#zendeskTickets svg').datum(fillZendeskGraphData(JSON.parse(zendeskRecords), false))
                    .transition().duration(500).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });
        }

        function loadGSData(graphData) {
            var dlac = [], inc = [], dwa = [], dsi = [], dsa = [];
            for (i = 0; i < graphData.length; i++) {
                inc.push({x: graphData[i].X_Text__c, y: graphData[i].Graph_Value_1__c});
                dwa.push({x: graphData[i].X_Text__c, y: graphData[i].Graph_Value_2__c});
                dsi.push({x: graphData[i].X_Text__c, y: graphData[i].Graph_Value_3__c});
                dsa.push({x: graphData[i].X_Text__c, y: graphData[i].Graph_Value_4__c});
                dlac.push({x: graphData[i].X_Text__c, y: graphData[i].Graph_Value_5__c});
            }

            return [ {key: "Inc", values: inc}, {key: "DWA", values: dwa},
                     {key: "DSI", values: dsi}, {key: "DSA", values: dsa}, {key: "DLAC", values: dlac} ];
        }

        function buildDiscBatChart(yLabel) {
            var chart = nv.models.discreteBarChart().height(400);
            chart.xAxis.rotateLabels(-40);
            chart.xAxis.axisLabel('Snapshot Date');
            chart.yAxis.axisLabel(yLabel);
            chart.x(function(d) { return d.label }).y(function(d) { return d.value });
            return chart;
        }

        function loadICDSData(graphName) {
            var tmp, records = [], graphData = JSON.parse($j("[id$=icdsDataId]").val());
            for (i = 0; i < graphData.length; i++) {
            if (graphName == 'users') {
                tmp = graphData[i].Graph_Value_1__c;
            } else if (graphName == 'wams') {
                tmp = graphData[i].Graph_Value_2__c;
            } else {
                tmp = graphData[i].Graph_Value_3__c;
            }
                records.push({label: graphData[i].X_Text__c, value: tmp});
            }
            return [{key: graphName, values: records}];
        }

        function fillServerUpTimeData(graphData) {
            var i, prod = [], icds = [], india = [];
            for (i = 0; i < graphData.length; i++) {
                prod.push({x: new Date(graphData[i].X_Text__c).getTime(), y: (graphData[i].Graph_Value_1__c / 100.00).toFixed(4)});
                india.push({x: new Date(graphData[i].X_Text__c).getTime(), y: (graphData[i].Graph_Value_2__c / 100.00).toFixed(4)});
                icds.push({x: new Date(graphData[i].X_Text__c).getTime(), y: (graphData[i].Graph_Value_3__c / 100.00).toFixed(4)});
            }

            return [{"values": prod, "key": "Average Prod Uptime"}, {"values": india, "key": "Average India Uptime"}, {"values": icds, "key": "Average ICDS Uptime"}];
        }


        function fillAggregateData(graphData) {
            var i, data = [];
            for (i = 0; i < graphData.length; i++) {
                data.push({"value": graphData[i].Graph_Value_1__c, "label": graphData[i].X_Text__c});
            }

            return [{key: "Aggregate Execution Efficiency", values: data}];
        }

        function buildMultiBatChart(labelTitleY, labelTitleX) {
            var chart = nv.models.multiBarChart().stacked(true).height(400).legendPosition('bottom').reduceXTicks(false);
            chart.legend.margin({"top": 22});
            chart.xAxis.rotateLabels(-40);
            chart.xAxis.axisLabel(labelTitleX);
            chart.yAxis.tickFormat(d3.format(',.1f'));
            chart.yAxis.ticks(6);
            chart.yAxis.axisLabel(labelTitleY);
            chart.yAxis.axisLabelDistance(1);
            return chart;
        }

        function buildMultiChart(labelTitle, my1, my2, range) {
            var chart = nv.models.multiChart().height(400);
            chart.margin({"right": 90});
            chart.yAxis1.tickFormat(d3.format(',.1f'));
            chart.yAxis1.axisLabel(labelTitle);
            chart.yAxis2.tickFormat(d3.format(',.1f'));
            chart.yAxis2.axisLabel('Avg # of Submissions (Thousands)');
            chart.yDomain1([0, my1]);
            chart.yDomain2([0, my2]);
            chart.xAxis.tickFormat(function(d) {
                        var dDate = new Date(d)
                        return (monthNames[dDate.getMonth()] + ' ' + dDate.getFullYear());
                    });
            chart.xAxis.axisLabel('Date');
            chart.xAxis.rotateLabels(-90);
            chart.xAxis.tickValues(range);
            return chart;
        }

        function buildPieChart(chartTitle) {
            var chart = nv.models.pieChart().height(400).donut(true).showLabels(true).growOnHover(false).arcsRadius(arcRadius1);
            chart.showLegend(true).showTooltipPercent(false).growOnHover(true);
            chart.x(function (d) { return d.key });
            chart.y(function (d) { return d.y });
            chart.pie.startAngle
                (
                    function(d) {
                        if (d.data.key == "Target Missing" && d.startAngle >= 0) {
                            return d.startAngle/2 - Math.PI/2;
                        }
                        return 0 - Math.PI/2;
                    }
                ).endAngle(
                    function(d) {
                        return d.endAngle/2 - Math.PI/2;
                    }
                );
            chart.title(chartTitle);
            return chart;
        }

        function fillPerformanceData(forPageLoad) {
            var graphData = JSON.parse($j("[id$=performanceGraphDataId]").val());
            var i, maxY1 = 0, maxY2 = 0, maxY3 = 0, count = 0, submissions = [], pageLoad = [], apdex = [];
            for (i = 0; i < graphData.length; i++) {
                count++;
                if (maxY1 < graphData[i].Graph_Value_1__c) {
                    maxY1 = graphData[i].Graph_Value_1__c;
                }
                if (maxY2 < graphData[i].Graph_Value_2__c) {
                    maxY2 = graphData[i].Graph_Value_2__c;
                }
                if (maxY3 < graphData[i].Graph_Value_3__c) {
                    maxY3 = graphData[i].Graph_Value_3__c;
                }
                submissions.push({x: new Date(graphData[i].X_Text__c).getTime(), y: graphData[i].Graph_Value_1__c});
                pageLoad.push({x: new Date(graphData[i].X_Text__c).getTime(), y: graphData[i].Graph_Value_2__c});
                apdex.push({x: new Date(graphData[i].X_Text__c).getTime(), y: graphData[i].Graph_Value_3__c});
            }
            if (forPageLoad == true) {
                return {"size": count,
                    "maxY1": maxY2,
                    "maxY2": maxY1,
                    "data": [{
                            "key": "Avg Page Load",
                            "values": pageLoad,
                            "type": "line",
                            "yAxis": 1
                        },
                        {
                            "key": "Avg # of Submissions (Thousands)",
                            "values": submissions,
                            "type": "line",
                            "yAxis": 2
                        }]
                };
            }
            return {"size": count,
                    "maxY1": maxY3,
                    "maxY2": maxY1,
                    "data": [{
                            "key": "Avg Apdex",
                            "values": apdex,
                            "type": "line",
                            "yAxis": 1
                        },
                        {
                            "key": "Avg # of Submissions (Thousands)",
                            "values": submissions,
                            "type": "line",
                            "yAxis": 2
                        }]
                };
         }

        function fillGSData(graphData, forCustomer) {
            var i, customerData = [], qualityData = [];
            for (i = 0; i < graphData.length; i++) {
                qualityData.push({x: new Date(graphData[i].X_Text__c).getTime(), y: graphData[i].Graph_Value_1__c / 100.00});
                customerData.push({x: new Date(graphData[i].X_Text__c).getTime(), y: graphData[i].Graph_Value_2__c / 100.00});
            }

            if (forCustomer == true) {
                return [{"values": customerData, "key": "GS Quality Customer Satisfaction"}];
            }
            return [{"values": qualityData, "key": "GS Quality Customer Satisfaction"}];
        }

        function fillGraphData(graphData, forMrr) {
            var i, advanced = [], community = [], enterprise = [], pro = [], standard = [], reseller = [], managedHosting = [];
            for (i = 0; i < graphData.length; i++) {
                advanced.push({x: graphData[i].X_Text__c, y: graphData[i].Graph_Value_1__c});
                community.push({x: graphData[i].X_Text__c, y: graphData[i].Graph_Value_2__c});
                enterprise.push({x: graphData[i].X_Text__c, y: graphData[i].Graph_Value_3__c});
                pro.push({x: graphData[i].X_Text__c, y: graphData[i].Graph_Value_4__c});
                standard.push({x: graphData[i].X_Text__c, y: graphData[i].Graph_Value_5__c});
                if (forMrr == true) {
                    reseller.push({x: graphData[i].X_Text__c, y: graphData[i].Graph_Value_6__c});
                    managedHosting.push({x: graphData[i].X_Text__c, y: graphData[i].Graph_Value_7__c});
                }
            }
            if (forMrr == true) {
                return [{ values: enterprise, key: "Enterprise"}, { values: advanced, key: "Advanced"}, { values: pro, key: "Pro"}, { values: standard, key: "Standard"},
                        { values: community, key: "Community"}, { values: managedHosting, key: "Managed Hosting"}, { values: reseller, key: "Reseller"}];
            }
            return [{ values: advanced, key: "Advanced"}, { values: community, key: "Community"}, { values: enterprise, key: "Enterprise"}, { values: pro, key: "Pro"},
                { values: standard, key: "Standard"}];
        }

        function fillZendeskGraphData(graphData, forMrr) {
            var i, enterprise = [], advanced = [], pro = [], standard = [], community = [], staff = [], icds = [];
            for (i = 0; i < graphData.length; i++) {
                enterprise.push({x: graphData[i].X_Text__c, y: graphData[i].Graph_Value_1__c});
                advanced.push({x: graphData[i].X_Text__c, y: graphData[i].Graph_Value_2__c});
                pro.push({x: graphData[i].X_Text__c, y: graphData[i].Graph_Value_3__c});
                standard.push({x: graphData[i].X_Text__c, y: graphData[i].Graph_Value_4__c});
                community.push({x: graphData[i].X_Text__c, y: graphData[i].Graph_Value_5__c});
                staff.push({x: graphData[i].X_Text__c, y: graphData[i].Graph_Value_6__c});
                icds.push({x: graphData[i].X_Text__c, y: graphData[i].Graph_Value_7__c});
            }
            return [{ values: enterprise, key: "Enterprise"}, { values: advanced, key: "Advanced"}, { values: pro, key: "Pro"}, { values: standard, key: "Standard"},
                    { values: community, key: "Community"}, { values: staff, key: "Staff"}, { values: icds, key: "ICDS"}];
        }
    </script>

    <apex:actionFunction action="{!loadScaleData}" name="loadScaleDataJs" status="loadingDiv" oncomplete="addGraphs()" reRender="corporateDashboardBlock"/>
    <apex:pageBlock title="Global Metrics" id="corporateDashboardBlock">
    <apex:inputHidden id="userGraphDataId" value="{!userGraphData}" />
    <apex:inputHidden id="formGraphDataId" value="{!formGraphData}" />
    <apex:inputHidden id="wamGraphDataId" value="{!wamGraphData}" />
    <apex:inputHidden id="programGraphDataId" value="{!programGraphData}" />
    <apex:inputHidden id="performanceGraphDataId" value="{!performanceGraphData}" />
    <apex:inputHidden id="gsGraphDataId" value="{!gsGraphData}" />
    <apex:inputHidden id="bufferEvGenId" value="{!bufferEvGen}" />
    <apex:inputHidden id="mrrDataId" value="{!mrrData}" />
    <apex:inputHidden id="evExpectedId" value="{!evExpected}" />
    <apex:inputHidden id="oppExpecteId" value="{!oppExpected}" />
    <apex:inputHidden id="aggregateEffId" value="{!AggregateEffData}" />
    <apex:inputHidden id="icdsDataId" value="{!icdsData}" />
    <apex:inputHidden id="serverUpTimeId" value="{!serverUpTime}" />
    <apex:inputHidden id="headCountDataId" value="{!headCountData}" />
    <apex:inputHidden id="gsRevenueDataId" value="{!gsRevenueData}" />
    <apex:inputHidden id="zendeskTicketsId" value="{!zendeskData}" />

    <a href="https://confluence.dimagi.com/display/internal/Global+Metrics" target="_blank"><h2>Graph definitions</h2></a><br /><br />

    <apex:outputText value="Dashboard refreshed at : {!dashboardRefreshTime}" />
        <apex:pageBlockSection title="Scale" collapsible="false" columns="1" >
            <div class="chartsData">
                <div id="activeUsers" class="graph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00Ob00000048BiR" target="_blank">Active Users</a>
                        </h2>
                    </div>
                </div>
                <div id="wams" class="graph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00Ob00000048BiR" target="_blank">WAMs</a>
                        </h2>
                    </div>
                </div>
                <div id="forms" class="graph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00Ob00000048BiR" target="_blank">Forms</a>
                        </h2>
                    </div>
                </div>
                <div id="programs" class="graph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00Ob00000048BiR" target="_blank">Active Project Spaces</a>
                        </h2>
                    </div>
                </div>
            </div>
            </apex:pageBlockSection>
            <apex:pageBlockSection title="Scale (ICDS-CAS)" collapsible="false" columns="1" >
            <div class="chartsData">
                <div id="activeUsersICDS" class="graph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00Ob0000004eTF2" target="_blank">Active Users - ICDS</a>
                        </h2>
                    </div>
                </div>
                <div id="wamsICDS" class="graph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00Ob0000004eTF2" target="_blank">WAMs - ICDS</a>
                        </h2>
                    </div>
                </div>
                <div id="formsICDS" class="graph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00Ob0000004eTF2" target="_blank">Forms - ICDS</a>
                        </h2>
                    </div>
                </div>
            </div>
        </apex:pageBlockSection>
        <apex:pageBlockSection title="Financial" collapsible="false" columns="1" >
            <div class="chartsData">
                <div id="netEV" class="gaugeGraph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00Ob00000047qYz" target="_blank">YTD Change in Net EV - Target $12.5 million</a>
                        </h2>
                    </div>
                    <div id="netEVBottomValue" class="graphBottomTitle"><h2>Sum of DIFF-Expected Value Minus Expense (Millions)</h2></div>
                </div>
                <div id="bufferEV" class="gaugeGraph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00Ob00000047qYz" target="_blank">YTD Buffer EV generated - Target $6.0 million</a>
                        </h2>
                    </div>
                <div id="bufferEVBottomValue" class="graphBottomTitle"><h2>Sum of DIFF-Expected Buffer (Millions)</h2></div>
                </div>
                <div id="oppWon" class="gaugeGraph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00Ob00000048GVF" target="_blank">YTD Opportunities Won - Target $ 9.0 million</a>
                        </h2>
                    </div>
                    <div id="oppWonBottomValue" class="graphBottomTitle"><h2>Sum of Expected Value Minus Expense Income (Millions)</h2></div>
                    </div>
                <div id="mrr" class="graph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00Ob00000048Bib" target="_blank">Monthly Recurring Revenue</a>
                        </h2>
                    </div>
                </div>
            </div>
        </apex:pageBlockSection>
        <apex:pageBlockSection title="Performance of Product" collapsible="false" columns="1" >
            <div class="chartsData">
                <div id="performance1" class="graph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00Ob00000047rxW" target="_blank">Average Page Load Time</a>
                        </h2>
                    </div>
                </div>
                <div id="performance2" class="graph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00Ob00000047rxW" target="_blank">Average Apdex (server response time)</a>
                        </h2>
                    </div>
                </div>
                <div id="serverUpTime" class="graph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00Ob0000004eXeG" target="_blank">Server Uptime</a>
                        </h2>
                    </div>
                </div>
            </div>
        </apex:pageBlockSection>
        <apex:pageBlockSection title="Global Services" collapsible="false" columns="1" >
            <div class="chartsData">
                <div id="aggregateExecution" class="graph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00Ob0000004Mfu8" target="_blank">Aggregate Execution Efficiency</a>
                        </h2>
                    </div>
                </div>
                <div id="quality" class="graph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00Ob000000481sq" target="_blank">GS Overall Project Status (% Green)</a>
                        </h2>
                    </div>
                </div>
                <div id="customers" class="graph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00Ob000000481sq" target="_blank">GS Partner Relationship  (% Green)</a>
                        </h2>
                    </div>
                </div>
                <div id="headcount" class="graph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00O0X000004meTr" target="_blank">GS Headcount</a>
                        </h2>
                    </div>
                </div>
            </div>
            <div class="chartsData">
                <div id="gsRevenue" class="graph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00O0X000004mpWX" target="_blank">GS Revenue</a>
                        </h2>
                    </div>
                </div>
            </div>
        </apex:pageBlockSection>
        <apex:pageBlockSection title="Support" collapsible="false" columns="1" >
            <div class="chartsData">
                <div id="zendeskTickets" class="graph">
                    <div class="graphTitle">
                        <h2>
                            <a href="https://dimagi.my.salesforce.com/00O0X000005wO8V" target="_blank"># of Tickets Created</a>
                        </h2>
                    </div>
                </div>
            </div>
        </apex:pageBlockSection>
    </apex:pageBlock>
</apex:component>